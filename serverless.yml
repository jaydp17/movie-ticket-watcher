service: movie-ticket-watcher
#app: your-app-name
#tenant: your-tenant-name

frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}
  logRetentionInDays: 14
  deploymentBucket:
    name: movie-ticket-watcher-go-binaries
  apiGateway:
    minimumCompressionSize: 1024
  tracing:
    apiGateway: true
    lambda: true
  environment:
    APP_ENV: ${ssm:/movie-ticket-watcher/${self:provider.stage}/APP_ENV}
    APP_STAGE: ${self:provider.stage}
    VAPID_PUBLIC_KEY: ${ssm:/movie-ticket-watcher/${self:provider.stage}/VAPID_PUBLIC_KEY}
    VAPID_PRIVATE_KEY: ${ssm:/movie-ticket-watcher/${self:provider.stage}/VAPID_PRIVATE_KEY}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:#{AWS::AccountId}:table/ticket-watcher-${self:provider.stage}.*"

package:
  individually: true
  excludeDevDependencies: false
  exclude:
    - ./**

functions:
  get-cities:
    handler: bin/get-cities
    events:
      - http:
          path: /cities
          method: get
          cors:
            origins:
              - 'https://movie-ticket-watcher.jaydp.com'
              - 'https://qa.movie-ticket-watcher.jaydp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    package:
      include:
        - ./bin/get-cities

  get-movies:
    handler: bin/get-movies
    events:
      - http:
          path: /movies/{regionCode}
          method: get
          cors:
            origins:
              - 'https://movie-ticket-watcher.jaydp.com'
              - 'https://qa.movie-ticket-watcher.jaydp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    package:
      include:
        - ./bin/get-movies

  get-cinemas:
    handler: bin/get-cinemas
    events:
      - http:
          path: /cinemas/{cityID}
          method: get
          cors:
            origins:
              - 'https://movie-ticket-watcher.jaydp.com'
              - 'https://qa.movie-ticket-watcher.jaydp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    package:
      include:
        - ./bin/get-cinemas

  subscribe:
    handler: bin/subscribe
    events:
      - http:
          path: /subscribe
          method: post
          cors:
            origins:
              - 'https://movie-ticket-watcher.jaydp.com'
              - 'https://qa.movie-ticket-watcher.jaydp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
    package:
      include:
        - ./bin/subscribe

  cron-check-tickets:
    handler: bin/cron-check-tickets
    events:
      - schedule:
          name: cron-check-tickets-${self:provider.stage}
          rate: rate(10 minutes)
          enabled: true
    package:
      include:
        - ./bin/cron-check-tickets

plugins:
  - serverless-pseudo-parameters
  - serverless-domain-manager

custom:
  domains:
    prod: api.movie-ticket-watcher.jaydp.com
    qa: qa-api.movie-ticket-watcher.jaydp.com
    dev: dev-api.movie-ticket-watcher.jaydp.com
  customDomain:
    basePath: ''
    domainName: ${self:custom.domains.${self:provider.stage}}
    certificateName: 'wildcard.jaydp.com'
    stage: '${self:provider.stage}'
    createRoute53Record: false